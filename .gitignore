# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

{"status":"fail","message":"Your version of Instagram is out of date. Please upgrade your app in the Play Store to log in to Instagram."}

 {
                             // If we get result, it always return status ok. Otherwise, exception will occur.                                           
                             var responseData = streamReader.ReadToEnd();
-                            return JsonConvert.DeserializeObject<UpdateProfileResult>(responseData);                            
+                            return JsonConvert.DeserializeObject<UpdateProfileResult>(responseData);
                         }
                     }
                 }
@@ -246,15 +246,16 @@ public UpdateProfileResult SetUsername(string newUsername)
         /// <returns></returns>
         public FollowResult Follow(string username)
         {
+
+            Debug.WriteLine("Following " + username);
+            var publicInfo = GetPublicInfo(username);
+            var request = HttpRequestBuilder.Post($"https://www.instagram.com/web/friendships/{publicInfo.user.id}/follow/", mCoockieC);
+            request.Referer = $"https://www.instagram.com/{publicInfo.user.username}/";
+            request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
+            request.Headers["X-Instagram-AJAX"] = "1";
+            request.Headers["X-Requested-With"] = "XMLHttpRequest";
             try
             {
-                Debug.WriteLine("Following " + username);
-                var publicInfo = GetPublicInfo(username);
-                var request = HttpRequestBuilder.Post($"https://www.instagram.com/web/friendships/{publicInfo.user.id}/follow/", mCoockieC);
-                request.Referer = $"https://www.instagram.com/{publicInfo.user.username}/";
-                request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
-                request.Headers["X-Instagram-AJAX"] = "1";
-                request.Headers["X-Requested-With"] = "XMLHttpRequest";
                 using (var response = request.GetResponse() as HttpWebResponse)
                 {
                     mCoockieC.Add(response.Cookies);
@@ -296,23 +297,31 @@ public LikeResult Like(string postId)
             request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
             request.Headers["X-Instagram-AJAX"] = "1";
             request.Headers["X-Requested-With"] = "XMLHttpRequest";
-            using (var response = request.GetResponse() as HttpWebResponse)
+            try
             {
-                mCoockieC.Add(response.Cookies);
-                if (request.HaveResponse)
+                using (var response = request.GetResponse() as HttpWebResponse)
                 {
-                    using (var responseStream = response.GetResponseStream())
-                    using (var streamReader = new StreamReader(responseStream))
+                    mCoockieC.Add(response.Cookies);
+                    if (request.HaveResponse)
                     {
-                        var responseData = streamReader.ReadToEnd();
-                        return JsonConvert.DeserializeObject<Models.LikeResult>(responseData);
+                        using (var responseStream = response.GetResponseStream())
+                        using (var streamReader = new StreamReader(responseStream))
+                        {
+                            var responseData = streamReader.ReadToEnd();
+                            return JsonConvert.DeserializeObject<Models.LikeResult>(responseData);
+                        }
+                    }
+                    else
+                    {
+                        throw new WebException("no response");
                     }
-                }
-                else
-                {
-                    throw new WebException("no response");
                 }
             }
+            catch (Exception ex)
+            {
+                Debug.WriteLine(ex.Message);
+                throw ex;
+            }
         }
 
         /// <summary>
@@ -332,26 +341,35 @@ public CommentResult Comment(string postId, string comment)
             request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
             request.Headers["X-Instagram-AJAX"] = "1";
             request.Headers["X-Requested-With"] = "XMLHttpRequest";
-            using (var stream = request.GetRequestStream())
-            {
-                stream.Write(content, 0, content.Length);
-            }
-            using (var response = request.GetResponse() as HttpWebResponse)
+            try
             {
-                mCoockieC.Add(response.Cookies);
-                if (request.HaveResponse)
+                using (var stream = request.GetRequestStream())
                 {
-                    using (var responseStream = response.GetResponseStream())
-                    using (var streamReader = new StreamReader(responseStream))
-                    {
-                        var responseData = streamReader.ReadToEnd();
-                        return JsonConvert.DeserializeObject<Models.CommentResult>(responseData);
-                    }
+                    stream.Write(content, 0, content.Length);
                 }
-                else
+                using (var response = request.GetResponse() as HttpWebResponse)
                 {
-                    throw new WebException("no response");
+                    mCoockieC.Add(response.Cookies);
+                    if (request.HaveResponse)
+                    {
+                        using (var responseStream = response.GetResponseStream())
+                        using (var streamReader = new StreamReader(responseStream))
+                        {
+                            var responseData = streamReader.ReadToEnd();
+                            return JsonConvert.DeserializeObject<Models.CommentResult>(responseData);
+                        }
+                    }
+                    else
+                    {
+                        throw new WebException("no response");
+                    }
                 }
+
+            }
+            catch (Exception ex)
+            {
+                Debug.WriteLine(ex.Message);
+                throw ex;
             }
         }
 
@@ -360,23 +378,46 @@ public CommentResult Comment(string postId, string comment)
         /// </summary>
         /// <param name="postId"></param>
         /// <returns></returns>
-        public bool Report(string postId)
+        public ReportResult Report(string postId, ReportReasonId reasonId)
         {
-            // I'm a good man, i don't test report XD
-            throw new NotImplementedException();
-        }
-
-        /// <summary>
-        /// Allow register new user account -- return Models.RegisterResult
-        /// </summary>
-        /// <param name="email"></param>
-        /// <param name="fullName"></param>
-        /// <param name="username"></param>
-        /// <param name="password"></param>
-        /// <returns></returns>
-        public bool Register(string email, string fullName, string username, string password)
-        {
-            throw new NotImplementedException();
+            var data = "reason_id=" + (int)reasonId;
+            var content = Encoding.ASCII.GetBytes(data);
+            var request = HttpRequestBuilder.Post($"https://www.instagram.com/media/{postId}/flag/", mCoockieC);
+            request.ContentType = "application/x-www-form-urlencoded";
+            request.Referer = $"https://www.instagram.com/";
+            request.ContentLength = content.Length;
+            request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
+            request.Headers["X-Instagram-AJAX"] = "1";
+            request.Headers["X-Requested-With"] = "XMLHttpRequest";
+            try
+            {
+                using (var stream = request.GetRequestStream())
+                {
+                    stream.Write(content, 0, content.Length);
+                }
+                using (var response = request.GetResponse() as HttpWebResponse)
+                {
+                    mCoockieC.Add(response.Cookies);
+                    if (request.HaveResponse)
+                    {
+                        using (var responseStream = response.GetResponseStream())
+                        using (var streamReader = new StreamReader(responseStream))
+                        {
+                            var responseData = streamReader.ReadToEnd();
+                            return JsonConvert.DeserializeObject<ReportResult>(responseData);
+                        }
+                    }
+                    else
+                    {
+                        throw new WebException("no response");
+                    }
+                }
+            }
+            catch (Exception ex)
+            {
+                Debug.WriteLine(ex.Message);
+                throw ex;
+            }
         }
 
         /// <summary>
3 InstagramUser/InstagramUser.csproj
@@ -48,13 +48,14 @@
   </ItemGroup>
   <ItemGroup>
     <Compile Include="HttpRequestBuilder.cs" />
-    <Compile Include="Instaguser.cs" />
+    <Compile Include="InstagamUser.cs" />
     <Compile Include="Models\CommentResult.cs" />
     <Compile Include="Models\ProfileResult.cs" />
     <Compile Include="Models\FollowResult.cs" />
     <Compile Include="Models\LikeResult.cs" />
     <Compile Include="Models\LoginResult.cs" />
     <Compile Include="Models\PublicInfoResult.cs" />
+    <Compile Include="Models\ReportResult.cs" />
     <Compile Include="Models\UpdateProfileResult.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
18 InstagramUser/Models/ReportResult.cs
@@ -0,0 +1,18 @@
+namespace InstagramUser.Models
+{
+    public class ReportResult
+    {        
+        public string status { get; set; }
+    }
+
+    public enum ReportReasonId
+    {
+        SpamOrScram = 1,
+        SelfHarm = 2,
+        DrugUse = 3,
+        NudityOrPornography = 4,
+        GraphicViolence = 5,
+        HateSpeechOrSymbol = 6,
+        HarassmentOrBullying = 7
+    }
+}
17 InstagramUser/Program.cs
@@ -1,12 +1,12 @@
 using System;
-using System.Collections.Generic;
 
 namespace InstagramUser
 {
     class Program
     {
         static void Main(string[] args)
-        {            
+        {
+            ReportTest();
             Console.ReadLine();
         }
 
@@ -96,5 +96,18 @@ static void CommentTest()
 
             Console.ReadLine();
         }
+
+        static void ReportTest()
+        {
+            var user = new InstagamUser("username", "password");        
+            var loginResult = user.LogIn();
+            if (loginResult.authenticated)
+            {
+                var commentResult = user.Report("1289832948493489827", Models.ReportReasonId.NudityOrPornography);
+                Console.WriteLine(commentResult.status);
+            }
+
+            Console.ReadLine();
+        }
     }

<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="9.0.1" targetFramework="net452" />
</packages>
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 14
VisualStudioVersion = 14.0.25420.1
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "InstagramUser", "InstagramUser\InstagramUser.csproj", "{548FA529-87B4-41FE-B9F9-579DFD9A6A20}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 14
VisualStudioVersion = 14.0.25420.1
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "InstagramUser", "InstagramUser\InstagramUser.csproj", "{548FA529-87B4-41FE-B9F9-579DFD9A6A20}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
param($installPath, $toolsPath, $package, $project)

# open json.net splash page on package install
# don't open if json.net is installed as a dependency

try
{
  $url = "http://www.newtonsoft.com/json/install?version=" + $package.Version
  $dte2 = Get-Interface $dte ([EnvDTE80.DTE2])

  if ($dte2.ActiveWindow.Caption -eq "Package Manager Console")
  {
    # user is installing from VS NuGet console
    # get reference to the window, the console host and the input history
    # show webpage if "install-package newtonsoft.json" was last input

    $consoleWindow = $(Get-VSComponentModel).GetService([NuGetConsole.IPowerConsoleWindow])

    $props = $consoleWindow.GetType().GetProperties([System.Reflection.BindingFlags]::Instance -bor `
      [System.Reflection.BindingFlags]::NonPublic)

    $prop = $props | ? { $_.Name -eq "ActiveHostInfo" } | select -first 1
    if ($prop -eq $null) { return }
  
    $hostInfo = $prop.GetValue($consoleWindow)
    if ($hostInfo -eq $null) { return }

    $history = $hostInfo.WpfConsole.InputHistory.History

    $lastCommand = $history | select -last 1

    if ($lastCommand)
    {
      $lastCommand = $lastCommand.Trim().ToLower()
      if ($lastCommand.StartsWith("install-package") -and $lastCommand.Contains("newtonsoft.json"))
      {
        $dte2.ItemOperations.Navigate($url) | Out-Null
      }
    }
  }
  else
  {
    # user is installing from VS NuGet dialog
    # get reference to the window, then smart output console provider
    # show webpage if messages in buffered console contains "installing...newtonsoft.json" in last operation

    $instanceField = [NuGet.Dialog.PackageManagerWindow].GetField("CurrentInstance", [System.Reflection.BindingFlags]::Static -bor `
      [System.Reflection.BindingFlags]::NonPublic)

    $consoleField = [NuGet.Dialog.PackageManagerWindow].GetField("_smartOutputConsoleProvider", [System.Reflection.BindingFlags]::Instance -bor `
      [System.Reflection.BindingFlags]::NonPublic)

    if ($instanceField -eq $null -or $consoleField -eq $null) { return }

    $instance = $instanceField.GetValue($null)

    if ($instance -eq $null) { return }

    $consoleProvider = $consoleField.GetValue($instance)
    if ($consoleProvider -eq $null) { return }

    $console = $consoleProvider.CreateOutputConsole($false)

    $messagesField = $console.GetType().GetField("_messages", [System.Reflection.BindingFlags]::Instance -bor `
      [System.Reflection.BindingFlags]::NonPublic)
    if ($messagesField -eq $null) { return }

    $messages = $messagesField.GetValue($console)
    if ($messages -eq $null) { return }

    $operations = $messages -split "=============================="

    $lastOperation = $operations | select -last 1

    if ($lastOperation)
    {
      $lastOperation = $lastOperation.ToLower()

      $lines = $lastOperation -split "`r`n"

      $installMatch = $lines | ? { $_.StartsWith("------- installing...newtonsoft.json ") } | select -first 1

      if ($installMatch)
      {
        $dte2.ItemOperations.Navigate($url) | Out-Null
      }
    }
  }
}
catch
{
  try
  {
    $pmPane = $dte2.ToolWindows.OutputWindow.OutputWindowPanes.Item("Package Manager")

    $selection = $pmPane.TextDocument.Selection
    $selection.StartOfDocument($false)
    $selection.EndOfDocument($true)

    if ($selection.Text.StartsWith("Attempting to gather dependencies information for package 'Newtonsoft.Json." + $package.Version + "'"))
    {
      # don't show on upgrade
      if (!$selection.Text.Contains("Removed package"))
      {
        $dte2.ItemOperations.Navigate($url) | Out-Null
      }
    }
  }
  catch
  {
    # stop potential errors from bubbling up
    # worst case the splash page won't open  
  }
}

